import Head from "next/head";
import Image from "next/image";
import { Nav } from "../../components/nav";
import bearRobo from '../bearRobo.jpg';
import back2 from "../endless-constellation.svg";

import { trpc } from "../../utils/trpc";
import { FormEventHandler, useEffect, useState } from "react";
import React from "react";

function useInterval(callback: unknown, delay: unknown) {
   const intervalRef = React.useRef();
   const callbackRef = React.useRef(callback);
 
   // Remember the latest callback:
   //
   // Without this, if you change the callback, when setInterval ticks again, it
   // will still call your old callback.
   //
   // If you add `callback` to useEffect's deps, it will work fine but the
   // interval will be reset.
 
   React.useEffect(() => {
     callbackRef.current = callback;
   }, [callback]);
 
   // Set up the interval:
 
   React.useEffect(() => {
     if (typeof delay === 'number') {
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-expect-error
      intervalRef.current = window.setInterval(() => callbackRef.current(), delay);
 
       // Clear interval if the components is unmounted or the delay changes:
       return () => window.clearInterval(intervalRef.current);
     }
   }, [delay]);
   
   // Returns a ref to the interval ID in case you want to clear it manually:
   return intervalRef;
 }
 
 //create your forceUpdate hook
function useForceUpdate(){
   const [value, setValue] = useState(0); // integer state
   return () => setValue(value => value + 1); // update state to force render
   // An function that increment üëÜüèª the previous state like here 
   // is better than directly setting `value + 1`
}


const FreeQuest = () => {
   const forceUpdate = useForceUpdate();
   const [messages, setMessages] = useState<(string | undefined)[]>([]);
   const [value, setValue] = useState<string>('');

   const [flag, setFlag] = useState<boolean>(false);
   trpc.example.hello.useQuery({ text: value }, { 
      onSuccess(data) {
         appendMessage(data.greeting);
      },
      onSettled() {
         setValue('');
         setFlag(false);
      },
      enabled: flag,
   });

   const startMessages: string[] = [
      "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –∏—Å–ø—ã—Ç–∞—Ç–µ–ª–µ–π –Ω–∞—à–µ–≥–æ —Ç–µ—Å—Ç-–∫–≤–µ—Å—Ç–∞! –î–∞–Ω–Ω—ã–π –∫–≤–µ—Å—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –¥–∞—Ç—å –Ω–∞—à–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ –≥–æ—Ä–æ–¥—Å–∫–∏—Ö –∫–≤–µ—Å—Ç–∞—Ö –≤–æ–æ–±—â–µ –∏ –ø–æ–∫–∞–∑–∞—Ç—å, –∫–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∫–≤–µ—Å—Ç–∞.",
      "–í—Å–µ –≤–∞—à–∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –±—É–¥—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –Ω–∞ —É–ª–∏—Ü–∞—Ö –Ω–∞—à–µ–≥–æ —Å–ª–∞–≤–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞: –Ω–∞—à –±–æ—Ç —Ç–∞–∫ –∂–µ, –∫–∞–∫ –∏ —Å–µ–π—á–∞—Å, –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º –∑–∞–¥–∞–Ω–∏—è; –≤–∞–º –∂–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞–π—Ç–∏ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ, –ø—Ä–∏–π—Ç–∏ —Ç—É–¥–∞ –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å, –∫–∞–∫-—Ç–æ —Å —ç—Ç–∏–º –º–µ—Å—Ç–æ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π. –ü–æ—Å–ª–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç –¥–∞—Å—Ç –≤–∞–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –¥–∞–ª—å—à–µ.",
      "–ê —Å–µ–π—á–∞—Å, —á—Ç–æ–±—ã –≤—ã —Å–∞–º–∏ –º–æ–≥–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤—Å—ë –∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º—Å—è –≤ –º–∞–ª–µ–Ω—å–∫–∏–π –∫–≤–µ—Å—Ç –ø–æ... –≤–∞—à–µ–º—É –¥–æ–º—É! –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É &quot;—Ç–µ—Å—Ç-–∫–≤–µ—Å—Ç –≤–ø–µ—Ä—ë–¥&quot;, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
      "–í–ù–ò–ú–ê–ù–ò–ï! –ù–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–µ—Ç–æ–≤ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º. –í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Å–ª–µ–¥—É–µ—Ç –ø–∏—Å–∞—Ç—å –≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ç–∞–∫, –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ –∑–∞–¥–∞–Ω–∏–∏, –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è (–±–µ–∑ —Ç–æ—á–µ–∫, –∑–∞–ø—è—Ç—ã—Ö, –∫–∞–≤—ã—á–µ–∫ –∏ –ø—Ä–æ—á.; —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞–∫ —Ç–∏—Ä–µ, –µ—Å–ª–∏ —Ç–æ–≥–æ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–≤–µ—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä –µ—Å–ª–∏ –æ–Ω –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ &quot;–∞–±—Ä–∞-–∫–∞–¥–∞–±—Ä–∞&quot;)",
      "–≠–¢–û –í–ê–ñ–ù–û! –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –µ—ë. –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç, –∑–Ω–∞—á–∏—Ç –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –≤—ã –≤–≤–æ–¥–∏—Ç–µ –µ–≥–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.",
   ];

   // const mmessages: (string | undefined) [] = [];

   // eslint-disable-next-line react-hooks/rules-of-hooks
   useEffect(() => {
      let i = 0;
      const interval = setInterval(() => {
        if (i === startMessages.length) {
         clearInterval(interval);
         return;
        }

        console.log(startMessages[i]);
        appendMessage(startMessages[i]!);
        forceUpdate();
        i++;
      }, 1000);
      return () => clearInterval(interval);
   }, []);

   // let i = 0;
   // eslint-disable-next-line react-hooks/rules-of-hooks
   // useInterval(() => {
   //    console.log(startMessages[i]);
   //    setMessages((msgs) => { 
   //       msgs.push(startMessages[i]); 
   //       // console.log(msgs);
   //       return msgs; 
   //    });
   //    i++;
   // }, 1000)

   const onSubmit: FormEventHandler<HTMLInputElement> = (data) => console.log(data);
   const appendMessage = (newMessage: string) => {
      messages.push(newMessage);
      setMessages(messages);
   }
   const sendMessage = () => {
      setFlag(true);
      appendMessage(value);
   }

   return (
      <>

         <Head>
            <title>–ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫–≤–µ—Å—Ç–∞</title>
            <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
            <meta name="keywords" content="–∫—É–ø–∏—Ç—å –∫–≤–µ—Å—Ç, –∫–≤–µ—Å—Ç—ã –≤ –Ø—Ä–æ—Å–ª–∞–≤–ª–µ, –≥–æ—Ä–æ–¥—Å–∫–∏–µ –∫–≤–µ—Å—Ç—ã, –ø–µ—à–∏–µ –∫–≤–µ—Å—Ç—ã, —É–ª–∏—á–Ω—ã–µ –∫–≤–µ—Å—Ç—ã"></meta>
            <meta name="description" content="–ö–≤–µ—Å—Ç-–°—Ç–µ–ø—Å (Quest-Steps) - –≥–æ—Ä–æ–¥—Å–∫–∏–µ (—É–ª–∏—á–Ω—ã–µ) –∫–≤–µ—Å—Ç—ã –≤ –Ø—Ä–æ—Å–ª–∞–≤–ª–µ!" />
            <link rel="icon" href="/favicon.ico" />
         </Head>

         <Nav></Nav>

         <main className="flex min-h-screen flex-col items-center justify-center p-10"
         style={{ backgroundImage: `url(${back2.src})` }}>
            <div className="flex flex-col flex-grow w-full max-w-4xl bg-white shadow-xl rounded-lg border-seventh-darkblue/25 border-solid border-2 overflow-hidden" >
               <div className="flex flex-col flex-grow h-0 p-5 overflow-auto">
                  <div className="flex w-full mt-2 space-x-3 max-w-sm sm:max-w-xl ">
                     <Image alt="–†–æ–±–æ—Ç-–º–∏—à–∫–∞" src={bearRobo} className="flex-shrink-0 h-10 w-10 rounded-full" />
                     <div>
                        {messages.map((message, i) => (
                           <div key={i} className="bg-seventh-darkblue p-3 rounded-r-lg rounded-bl-lg mb-2 animate-show">
                              <p className="text-sm text-white">{message}</p>
                           </div>
                        ))}
                     </div>
                  </div>
               </div>
               <div className="px-4">
                  <input value={value} onChange={ev => setValue(ev.target.value)} onSubmit={onSubmit} className="flex items-center h-10 w-full rounded px-3 border-2 border-seventh-darkblue/25 text-sm" type="text" placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç —Ä–æ–±–æ-–º–∏—à–∫–µ‚Ä¶"></input>
               </div>
               <div className="p-4 text-center">
               <button onClick={sendMessage} className="bg-eight-blue text-white font-bold py-2 px-4 border-b-4 border-b-seventh-darkblue rounded">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
               </div>
            </div>
         </main>
      </>
   )
}

export default FreeQuest;